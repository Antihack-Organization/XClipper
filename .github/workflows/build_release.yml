name: Build & Release
on:
  push:
    branches: [ master, action_test ] # Remove this second branch after test
  pull_request:
    branches: [ master, action_test ] # Remove this second branch after test

jobs:
  windows:
    runs-on: windows-latest
    if: "contains(github.event.head_commit.message, '[Released]')"
    steps:
      - uses: actions/checkout@v2
      - name: Setting up nuget
        uses: warrenbuckley/Setup-Nuget@v1
      - name: Setting up msbuild
        uses: warrenbuckley/Setup-MSBuild@v1
      - name: Setting up dependencies
        id: csproj_protect
        uses: RollyPeres/base64-to-path@v1
        with: 
          filePath: ${{ github.workspace }}/protect.tar.gz
          encodedString: ${{ secrets.SLN_PROTECT }}
      - name: Restoring dependencies & building project
        run: |
          tar -xvzf protect.tar.gz
          tar -xvzf scripts\inno.tar.gz
          nuget restore XClipper.sln
          msbuild XClipper.sln /t:Rebuild /p:WarningLevel=0 /p:Configuration=Release
      - name: Building Installer
        run: |
          md XClipper.App\bin\Release\locales
          copy XClipper.App\Locales\*.xaml XClipper.App\bin\Release\locales
          del XClipper.App\bin\Release\*.xml
          del XClipper.App\bin\Release\*.pdb
          del XClipper.App\bin\Release\*.config
          echo "::set-output name=production_version::$(${{ github.workspace }}\packager.exe -i exe)"
          ${{ github.workspace }}\packager.exe -r
          scripts\inno\iscc.exe scripts\installer.iss 
      - name: Setting output file
        id: vars
        shell: pwsh
        run: |
          echo "::set-output name=production::$(echo (Get-ChildItem -Path "scripts\out" | sort | Select-Object -First 1).Name | cut -c -25)"
      - name: Creating portable tar.gz
        run: |
          cd XClipper.App\bin\Release && tar -cvzf "${{ github.workspace }}\scripts\out\${{ steps.vars.outputs.production }}.tar.gz" *
      - name: Creating release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: ${{ github.workspace }}\scripts\changes.txt
          draft: true
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./scripts/out/${{ steps.vars.outputs.production }}.exe
          asset_name: ${{ steps.vars.outputs.production }}.exe
          asset_content_type: application/octet-stream
      - name: Upload Release Asset
        id: upload-release-asset2 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./scripts/out/${{ steps.vars.outputs.production }}.tar.gz
          asset_name: XClipper-Portable-x64.tar.gz
          asset_content_type: application/octet-stream
